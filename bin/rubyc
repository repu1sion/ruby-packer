#!/usr/bin/env ruby

# Copyright (c) 2017 Minqi Pan <pmq2001@gmail.com>
# 
# This file is part of Ruby Compiler, distributed under the MIT License
# For full terms see the included LICENSE file

$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)

require "compiler"
require 'optparse'

USAGE = %Q{

Ruby Compiler (rubyc) v#{::Compiler::VERSION}
Compiling your Ruby application into a single executable.

Usage
  rubyc [OPTION]... [ENTRANCE]
  If ENTRANCE was not provided, then a single Ruby interpreter executable will be produced.
  ENTRANCE can be either a file path, or a "x" string as in bundle exec "x".

}.strip

EXAMPLES = %Q{

Examples

  Producing a single Ruby interpreter executable:
    rubyc
    ./a.out (or a.exe on Windows)
  
  Compiling a CLI tool:
    git clone --depth 1 https://github.com/pmq20/ruby-compiler.git
    cd ruby-compiler
    rubyc bin/rubyc
    ./a.out (or a.exe on Windows)
  
  Compiling a Rails application:
    rails new yours
    cd yours
    rubyc bin/rails
    ./a.out (or a.exe on Windows)

  Compiling a Gem:
    rubyc --gem=bundler bundle
    ./a.out (or a.exe on Windows)

}.strip

options = {}

outer_opts = nil

usage = lambda do |out|
  out.puts outer_opts
end

OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on("-rDIR", "--root=DIR", "The path to the root of the application") do |dir|
    options[:root] = dir
  end

  opts.on("-oFILE", "--output=FILE", "The path of the output file") do |file|
    options[:output] = file
  end

  opts.on("-dDIR", "--tmpdir=DIR", "The directory for temporary files") do |dir|
    options[:tmpdir] = dir
  end

  opts.on("-c", "--clean-tmpdir", "Cleans temporary files before compiling") do
    options[:clean_tmpdir] = true
  end

  opts.on("--keep-tmpdir", "Keeps all temporary files that were generated last time") do
    options[:keep_tmpdir] = true
  end

  opts.on("--make-args=ARGS", "Extra arguments to be passed to make") do |args|
    options[:make_args] = args
  end

  opts.on("--nmake-args=ARGS", "Extra arguments to be passed to nmake") do |args|
    options[:nmake_args] = args
  end

  opts.on("--gem=NAME", "Downloads and compiles the specified gem") do |name|
    options[:gem] = name
  end

  opts.on("--gem-version=VER", "Downloads and compiles the specified version of the gem") do |ver|
    options[:gem_version] = ver
  end

  opts.on("--auto-update-url=URL", "Enables auto-update and specifies the URL to get the latest version") do |url|
    options[:auto_update_url] = url
  end

  opts.on("--auto-update-base=STRING", "Enables auto-update and specifies the base version string") do |string|
    options[:auto_update_base] = string
  end

  opts.on("--debug", "Enable debug mode") do
    options[:debug] = true
  end

  opts.on("--quiet", "Enable quiet mode") do
    options[:quiet] = true
  end

  opts.on("-v", "--version", "Prints the version of rubyc and exit") do
    puts ::Compiler::VERSION
    exit 0
  end

  opts.on('-V', "--ruby-version", "Prints the version of the Ruby runtime and exit") do
    puts ::Compiler.ruby_version
    exit 0
  end

  opts.on("--ruby-api-version", "Prints the version of the Ruby API and exit") do
    puts ::Compiler.ruby_api_version
    exit 0
  end

  opts.on("-h", "--help", "Prints this help and exit") do
    usage.call(STDOUT)
    STDOUT.puts
    STDOUT.puts EXAMPLES
    exit 0
  end

  outer_opts = opts
end.parse!

entrance = ARGV[-1]

begin
  instance = ::Compiler.new entrance, options
  instance.run!
rescue ::Compiler::Error => e
  STDERR.puts e.message
  exit 1
end
